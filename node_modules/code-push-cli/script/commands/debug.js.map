{"version":3,"sources":["script/commands/debug.ts"],"names":["AndroidDebugPlatform","AndroidDebugPlatform.constructor","AndroidDebugPlatform.getLogProcess","AndroidDebugPlatform.getNumberOfAvailableDevices","AndroidDebugPlatform.normalizeLogMessage","iOSDebugPlatform","iOSDebugPlatform.constructor","iOSDebugPlatform.getSimulatorID","iOSDebugPlatform.getLogProcess","iOSDebugPlatform.normalizeLogMessage","processLogData"],"mappings":"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","file":"debug.js","sourcesContent":["import * as childProcess from \"child_process\";\nimport * as cli from \"../../definitions/cli\";\nimport * as moment from \"moment\";\nimport * as path from \"path\";\nimport * as Q from \"q\";\n\nconst simctl = require(\"simctl\");\nconst which = require(\"which\");\n\ninterface IDebugPlatform {\n    getLogProcess(): any;\n    normalizeLogMessage(message: string): string;\n}\n\nclass AndroidDebugPlatform implements IDebugPlatform {\n    public getLogProcess(): any {\n        try {\n            which.sync(\"adb\");\n        } catch (e) {\n            throw new Error(\"ADB command not found. Please ensure it is installed and available on your path.\");\n        }\n\n        const numberOfAvailableDevices = this.getNumberOfAvailableDevices();\n        if (numberOfAvailableDevices === 0) {\n            throw new Error(\"No Android devices found. Re-run this command after starting one.\");\n        }\n\n        // For now there is no ability to specify device for debug like:\n        // code-push debug android \"192.168.121.102:5555\"\n        // So we have to throw an error in case more than 1 android device was attached \n        // otherwise we will very likely run into an exception while trying to read ‘adb logcat’ from device which codepushified app is not running on.\n        if (numberOfAvailableDevices > 1) { \n            throw new Error(`Found \"${numberOfAvailableDevices}\" android devices. Please leave only one device you need to debug.`);\n        }\n\n        return childProcess.spawn(\"adb\", [\"logcat\"]);\n    }\n\n    // The following is an example of what the output looks\n    // like when running the \"adb devices\" command.\n    //\n    // List of devices attached\n    // emulator-5554    device\n    // 192.168.121.102:5555    device\n    private getNumberOfAvailableDevices(): number {\n        const output = childProcess.execSync(\"adb devices\").toString();\n        const matches = output.match(/\\b(device)\\b/mig);\n        if (matches != null) {\n            return matches.length;\n        }\n        return 0;\n    }\n\n    public normalizeLogMessage(message: string): string {\n        // Check to see whether the message includes the source URL\n        // suffix, and if so, strip it. This can occur in Android Cordova apps.\n        const sourceURLIndex: number = message.indexOf(\"\\\", source: file:///\");\n        if (~sourceURLIndex) {\n            return message.substring(0, sourceURLIndex);\n        } else {\n            return message;\n        }\n    }\n}\n\nclass iOSDebugPlatform implements IDebugPlatform {\n    private getSimulatorID(): string {\n        const output: any = simctl.list({ devices: true, silent: true });\n        const simulators: string[] = output.json.devices\n                                        .map((platform: any) => platform.devices)\n                                        .reduce((prev: any, next: any) => prev.concat(next))\n                                        .filter((device: any) => device.state === \"Booted\")\n                                        .map((device: any) => device.id);\n\n        return simulators[0];\n    }\n\n    public getLogProcess(): any {\n        if (process.platform !== \"darwin\") {\n            throw new Error(\"iOS debug logs can only be viewed on OS X.\");\n        }\n\n        const simulatorID: string = this.getSimulatorID();\n        if (!simulatorID) {\n            throw new Error(\"No iOS simulators found. Re-run this command after starting one.\"); \n        }\n\n        const logFilePath: string = path.join(process.env.HOME, \"Library/Logs/CoreSimulator\", simulatorID, \"system.log\");\n        return childProcess.spawn(\"tail\", [\"-f\", logFilePath]);\n    }\n\n    public normalizeLogMessage(message: string): string {\n        return message;\n    }\n}\n\nconst logMessagePrefix = \"[CodePush] \";\nfunction processLogData(logData: Buffer) {\n    const content = logData.toString()\n    content.split(\"\\n\")\n        .filter((line: string) => line.indexOf(logMessagePrefix) > -1)\n        .map((line: string) => {\n            // Allow the current platform\n            // to normalize the message first.\n            line = this.normalizeLogMessage(line);\n\n            // Strip the CodePush-specific, platform agnostic\n            // log message prefix that is added to each entry.\n            const message = line.substring(line.indexOf(logMessagePrefix) + logMessagePrefix.length);\n            \n            const timeStamp = moment().format(\"hh:mm:ss\");\n            return `[${timeStamp}] ${message}`;\n        })\n        .forEach((line: string) => console.log(line));\n}\n\nconst debugPlatforms: any = {\n    android: new AndroidDebugPlatform(),\n    ios: new iOSDebugPlatform()\n};\n\nexport default function (command: cli.IDebugCommand): Q.Promise<void> {\n    return Q.Promise<void>((resolve, reject) => {\n        const platform: string = command.platform.toLowerCase();\n        const debugPlatform: IDebugPlatform = debugPlatforms[platform];\n\n        if (!debugPlatform) {\n            const availablePlatforms = Object.getOwnPropertyNames(debugPlatforms);\n            return reject(new Error(`\"${platform}\" is an unsupported platform. Available options are ${availablePlatforms.join(\", \")}.`));\n        }\n\n        try {\n            const logProcess = debugPlatform.getLogProcess();\n            console.log(`Listening for ${platform} debug logs (Press CTRL+C to exit)`);\n\n            logProcess.stdout.on(\"data\", processLogData.bind(debugPlatform));\n            logProcess.stderr.on(\"data\", reject);\n\n            logProcess.on(\"close\", resolve); \n        } catch (e) {\n            reject(e);\n        }\n    }); \n};"],"sourceRoot":"../../.."}