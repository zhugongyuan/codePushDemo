{"version":3,"sources":["test/hash-utils.ts"],"names":["randomString","unzipToDirectory"],"mappings":"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","file":"hash-utils.js","sourcesContent":["import * as assert from \"assert\";\nimport * as crypto from \"crypto\";\nimport * as fs from \"fs\";\nimport * as hashUtils from \"../script/hash-utils\";\nvar mkdirp = require(\"mkdirp\");\nimport * as os from \"os\";\nimport * as path from \"path\";\nimport * as q from \"q\";\nvar yauzl = require(\"yauzl\");\n\nimport PackageManifest = hashUtils.PackageManifest;\nimport Promise = q.Promise;\n\nfunction randomString(): string {\n    var stringLength = 10;\n    return crypto.randomBytes(Math.ceil(stringLength / 2))\n        .toString('hex') // convert to hexadecimal format\n        .slice(0, stringLength);   // return required number of characters\n}\n\nfunction unzipToDirectory(zipPath: string, directoryPath: string): Promise<void> {\n    var deferred: q.Deferred<void> = q.defer<void>();\n    var originalCwd: string = process.cwd();\n\n    mkdirp(directoryPath, (err: Error) => {\n        if (err) throw err;\n        process.chdir(directoryPath);\n\n        yauzl.open(zipPath, {lazyEntries: true}, function(err: Error, zipfile: any) {\n            if (err) throw err;\n            zipfile.readEntry();\n            zipfile.on(\"entry\", function(entry: any) {\n                if (/\\/$/.test(entry.fileName)) {\n                    // directory file names end with '/'\n                    mkdirp(entry.fileName, function(err: Error) {\n                        if (err) throw err;\n                        zipfile.readEntry();\n                    });\n                } else {\n                    // file entry\n                    zipfile.openReadStream(entry, function(err: Error, readStream: any) {\n                        if (err) throw err;\n                        // ensure parent directory exists\n                        mkdirp(path.dirname(entry.fileName), function(err: Error) {\n                            if (err) throw err;\n                            readStream.pipe(fs.createWriteStream(entry.fileName));\n                            readStream.on(\"end\", function() {\n                                zipfile.readEntry();\n                            });\n                        });\n                    });\n                }\n            });\n\n            zipfile.on(\"end\", function(err: Error) {\n                if (err) deferred.reject(err);\n                else deferred.resolve(<void>null);\n            });\n        });\n    });\n\n    return deferred.promise\n        .finally(() => {\n            process.chdir(originalCwd);\n        });\n}\n\ndescribe(\"Hashing utility\", () => {\n    const TEST_DIRECTORY = path.join(os.tmpdir(), \"codepushtests\", randomString());\n\n    const TEST_ARCHIVE_FILE_PATH = path.join(__dirname, \"resources\", \"test.zip\");\n    const TEST_ZIP_HASH = \"540fed8df3553079e81d1353c5cc4e3cac7db9aea647a85d550f646e8620c317\";\n    const TEST_ZIP_MANIFEST_HASH = \"9e0499ce7df5c04cb304c9deed684dc137fc603cb484a5b027478143c595d80b\";\n    const HASH_B = \"3e23e8160039594a33894f6564e1b1348bbd7a0088d42c4acb73eeaed59c009d\";\n    const HASH_C = \"2e7d2c03a9507ae265ecf5b5356885a53393a2029d241394997265a1a25aefc6\";\n    const HASH_D = \"18ac3e7343f016890c510e93f935261169d9e3f565436429830faf0934f4f8e4\";\n\n    const IGNORED_METADATA_ARCHIVE_FILE_PATH = path.join(__dirname, \"resources\", \"ignoredMetadata.zip\");\n    const INDEX_HASH = \"b0693dc92f76e08bf1485b3dd9b514a2e31dfd6f39422a6b60edb722671dc98f\";\n\n    it(\"generates a package hash from file\", (done) => {\n        hashUtils.hashFile(TEST_ARCHIVE_FILE_PATH)\n            .done((packageHash: string): void => {\n                assert.equal(packageHash, TEST_ZIP_HASH);\n\n                done();\n            });\n    });\n\n    it(\"generates a package manifest for an archive\", (done) => {\n        hashUtils.generatePackageManifestFromZip(TEST_ARCHIVE_FILE_PATH)\n            .done((manifest: PackageManifest): void => {\n                var fileHashesMap = manifest.toMap();\n                assert.equal(fileHashesMap.size, 3);\n\n                var hash: string = fileHashesMap.get(\"b.txt\");\n                assert.equal(hash, HASH_B);\n\n                hash = fileHashesMap.get(\"c.txt\");\n                assert.equal(hash, HASH_C);\n\n                hash = fileHashesMap.get(\"d.txt\");\n                assert.equal(hash, HASH_D);\n\n                done();\n            });\n    });\n\n    it(\"generates a package manifest for a directory\", (done) => {\n        var directory = path.join(TEST_DIRECTORY, \"testZip\");\n\n        unzipToDirectory(TEST_ARCHIVE_FILE_PATH, directory)\n            .then(() => {\n                return hashUtils.generatePackageManifestFromDirectory(/*directoryPath*/ directory, /*basePath*/ directory);\n            })\n            .done((manifest: PackageManifest): void => {\n                var fileHashesMap = manifest.toMap();\n                assert.equal(fileHashesMap.size, 3);\n\n                var hash: string = fileHashesMap.get(\"b.txt\");\n                assert.equal(hash, HASH_B);\n\n                hash = fileHashesMap.get(\"c.txt\");\n                assert.equal(hash, HASH_C);\n\n                hash = fileHashesMap.get(\"d.txt\");\n                assert.equal(hash, HASH_D);\n\n                done();\n            });\n    });\n\n    it(\"generates a package hash from manifest\", (done) => {\n        hashUtils.generatePackageManifestFromZip(TEST_ARCHIVE_FILE_PATH)\n            .then((manifest: PackageManifest) => {\n                return manifest.computePackageHash();\n            })\n            .done((packageHash: string): void => {\n                assert.equal(packageHash, TEST_ZIP_MANIFEST_HASH);\n\n                done();\n            });\n    });\n\n    it(\"generates a package manifest for an archive with ignorable metadata\", (done) => {\n        hashUtils.generatePackageManifestFromZip(IGNORED_METADATA_ARCHIVE_FILE_PATH)\n            .done((manifest: PackageManifest): void => {\n                assert.equal(manifest.toMap().size, 1);\n                var hash: string = manifest.toMap().get(\"www/index.html\");\n                assert.equal(hash, INDEX_HASH);\n                done();\n            });\n    });\n\n    it(\"generates a package manifest for a directory with ignorable metadata\", (done) => {\n        var directory = path.join(TEST_DIRECTORY, \"ignorableMetadata\");\n\n        unzipToDirectory(IGNORED_METADATA_ARCHIVE_FILE_PATH, directory)\n            .then(() => {\n                return hashUtils.generatePackageManifestFromDirectory(/*directoryPath*/ directory, /*basePath*/ directory);\n            })\n            .done((manifest: PackageManifest): void => {\n                assert.equal(manifest.toMap().size, 1);\n                var hash: string = manifest.toMap().get(\"www/index.html\");\n                assert.equal(hash, INDEX_HASH);\n                done();\n            });\n    });\n});\n"],"sourceRoot":"../.."}